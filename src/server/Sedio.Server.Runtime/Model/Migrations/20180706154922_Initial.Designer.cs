// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sedio.Server.Runtime.Model;

namespace Sedio.Server.Runtime.Model.Migrations
{
    [DbContext(typeof(ModelDbContext))]
    [Migration("20180706154922_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("Sedio.Server.Runtime.Model.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan?>("CacheTime");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(48);

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceDependency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(48);

                    b.Property<long>("ServiceVersionId");

                    b.Property<string>("VersionRequirement")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceVersionId");

                    b.HasIndex("VersionRequirement");

                    b.ToTable("ServiceDependencies");
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceEndpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Port");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(48);

                    b.Property<long>("ServiceVersionId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceVersionId");

                    b.ToTable("ServiceEndpoints");
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(48);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<long>("ServiceVersionId");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.HasIndex("ServiceVersionId");

                    b.ToTable("ServiceInstances");
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Message");

                    b.Property<long>("ServiceInstanceId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInstanceId");

                    b.HasIndex("Status");

                    b.ToTable("ServiceStatus");
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan?>("CacheTime");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<long>("ServiceId");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("VersionOrder");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Version");

                    b.HasIndex("VersionOrder");

                    b.ToTable("ServiceVersions");
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.Service", b =>
                {
                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.HealthAggregationConfiguration", "HealthAggregation", b1 =>
                        {
                            b1.Property<long>("ServiceId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("Services");

                            b1.HasOne("Sedio.Server.Runtime.Model.Service")
                                .WithOne("HealthAggregation")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.HealthAggregationConfiguration", "ServiceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceDependency", b =>
                {
                    b.HasOne("Sedio.Server.Runtime.Model.ServiceVersion", "ServiceVersion")
                        .WithMany("ServiceDependencies")
                        .HasForeignKey("ServiceVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceEndpoint", b =>
                {
                    b.HasOne("Sedio.Server.Runtime.Model.ServiceVersion", "ServiceVersion")
                        .WithMany("ServiceEndpoints")
                        .HasForeignKey("ServiceVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceInstance", b =>
                {
                    b.HasOne("Sedio.Server.Runtime.Model.ServiceVersion", "ServiceVersion")
                        .WithMany("ServiceInstances")
                        .HasForeignKey("ServiceVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceStatus", b =>
                {
                    b.HasOne("Sedio.Server.Runtime.Model.ServiceInstance", "ServiceInstance")
                        .WithMany("ServiceStatus")
                        .HasForeignKey("ServiceInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sedio.Server.Runtime.Model.ServiceVersion", b =>
                {
                    b.HasOne("Sedio.Server.Runtime.Model.Service", "Service")
                        .WithMany("ServiceVersions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.HealthCheckConfiguration", "HealthCheck", b1 =>
                        {
                            b1.Property<long?>("ServiceVersionId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("ServiceVersions");

                            b1.HasOne("Sedio.Server.Runtime.Model.ServiceVersion")
                                .WithOne("HealthCheck")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.HealthCheckConfiguration", "ServiceVersionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.InstanceRetirementConfiguration", "InstanceRetirement", b1 =>
                        {
                            b1.Property<long?>("ServiceVersionId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("ServiceVersions");

                            b1.HasOne("Sedio.Server.Runtime.Model.ServiceVersion")
                                .WithOne("InstanceRetirement")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.InstanceRetirementConfiguration", "ServiceVersionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.InstanceRoutingConfiguration", "InstanceRouting", b1 =>
                        {
                            b1.Property<long?>("ServiceVersionId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("ServiceVersions");

                            b1.HasOne("Sedio.Server.Runtime.Model.ServiceVersion")
                                .WithOne("InstanceRouting")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.InstanceRoutingConfiguration", "ServiceVersionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.NotificationConfiguration", "Notification", b1 =>
                        {
                            b1.Property<long?>("ServiceVersionId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("ServiceVersions");

                            b1.HasOne("Sedio.Server.Runtime.Model.ServiceVersion")
                                .WithOne("Notification")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.NotificationConfiguration", "ServiceVersionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.OrchestrationConfiguration", "Orchestration", b1 =>
                        {
                            b1.Property<long?>("ServiceVersionId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("ServiceVersions");

                            b1.HasOne("Sedio.Server.Runtime.Model.ServiceVersion")
                                .WithOne("Orchestration")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.OrchestrationConfiguration", "ServiceVersionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Sedio.Server.Runtime.Model.Components.HealthAggregationConfiguration", "HealthAggregation", b1 =>
                        {
                            b1.Property<long>("ServiceVersionId");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(48);

                            b1.Property<string>("ProviderParametersJson");

                            b1.ToTable("ServiceVersions");

                            b1.HasOne("Sedio.Server.Runtime.Model.ServiceVersion")
                                .WithOne("HealthAggregation")
                                .HasForeignKey("Sedio.Server.Runtime.Model.Components.HealthAggregationConfiguration", "ServiceVersionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
